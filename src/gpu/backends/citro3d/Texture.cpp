/* Texture.cpp - 3DS */

#include "lib3ds.h"
#include "lodepng.h"
#include <Texture.h>

// These headers are generated by the build process
#include <textures/empty.png.h>
#include <textures/background.png.h>
#include <textures/frame.png.h>
#include <textures/ui_font.png.h>
#include <textures/tileset.png.h>
#include <textures/outline.png.h>

// TODO put this in generic code
static Texture empty_tex;
static Texture background_tex;
static Texture tileset_tex;
static Texture outline_tex;
static Texture frame_tex;
//static Texture digits_tex;
//static Texture labels_tex;
static Texture text_tex;
//static Texture grades_tex;
//static Texture timer_tex;

Texture& get_texture(TextureID id) {
    switch(id) {
        case TexturesID::BACKGROUND:
            return background_tex;

        case TexturesID::BLOCKS:
            return tileset_tex;

        case TexturesID::OUTLINE:
            return outline_tex;

        case TexturesID::TEXT:
            return text_tex;

        case TexturesID::FRAME:
            return frame_tex;

        default:
            return empty_tex;
    }
}

static void convert_endianess(u8 *destination, u8 *source, unsigned int length) {
    u8 *src = source;
    u8 *dst = destination;

    for(unsigned int i = 0; i < length; i++) {
        int r = *src++;
        int g = *src++;
        int b = *src++;
        int a = *src++;

        *dst++ = a;
        *dst++ = b;
        *dst++ = g;
        *dst++ = r;
    }
}

#define TEXTURE_TRANSFER_FLAGS \
    (GX_TRANSFER_FLIP_VERT(1) | GX_TRANSFER_OUT_TILED(1) | GX_TRANSFER_RAW_COPY(0) | \
    GX_TRANSFER_IN_FORMAT(GX_TRANSFER_FMT_RGBA8) | GX_TRANSFER_OUT_FORMAT(GX_TRANSFER_FMT_RGBA8) | \
    GX_TRANSFER_SCALING(GX_TRANSFER_SCALE_NO))

static void load_texture(C3D_Tex *tex, const u8 *img, const u32 img_size) {
    unsigned int width, height;
    u8* image;

    lodepng_decode32(&image, &width, &height, img, img_size);

    u8 *gpusrc = (u8 *) linearAlloc(width * height * 4);

    // lodepng outputs big endian rgba so we need to convert
    convert_endianess(gpusrc, image, width * height);

    // ensure data is in physical ram
    GSPGPU_FlushDataCache(gpusrc, width * height * 4);

    // Load the texture and bind it to the first texture unit
    C3D_TexInit(tex, width, height, GPU_RGBA8);

    // Convert image to 3DS tiled texture format
    C3D_SyncDisplayTransfer((u32*)gpusrc, GX_BUFFER_DIM(width, height), (u32*) tex->data, GX_BUFFER_DIM(width, height), TEXTURE_TRANSFER_FLAGS);

    C3D_TexSetFilter(tex, GPU_LINEAR, GPU_NEAREST);

    free(image);
    linearFree(gpusrc);
}

void load_textures() {
    load_texture(&background_tex.handle, background_png, background_png_size);
    load_texture(&empty_tex.handle, empty_png, empty_png_size);
    load_texture(&frame_tex.handle, frame_png, frame_png_size);
    load_texture(&text_tex.handle, ui_font_png, ui_font_png_size);
    load_texture(&tileset_tex.handle, tileset_png, tileset_png_size);
    load_texture(&outline_tex.handle, outline_png, outline_png_size);
}
